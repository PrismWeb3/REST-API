
# ENVIORNMENT PROFILES: 
#   - Dev, testing local changes ready in preperation for a commit
#   - Stage, production-like stage for testing release canidates
#   - Prod, production instance of shipped application

version: "3.8"
services:
  nginx: 
    container_name: nginx
    image: nginx:latest
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    depends_on: 
      - server
    ports:
      - 80:80
      - 443:443
    profiles:
      - prod
  certbot:
    image: certbot/certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    profiles:
      - prod
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
  mongodb:
    container_name: mongodb
    image: mongo:latest
    volumes:
      - ./data/mongodb:/data/db
    expose:
    - "27017"
    ports:
    - 27017:27017
    logging:
      driver: none
    profiles:
      - dev
  ipfs:
    container_name: ipfs
    image: ipfs/go-ipfs:latest
    environment:
      - IPFS_PROFILE=server
      - IPFS_PATH=/ipfsdata
    volumes:
      - ./data/ipfs:/ipfsdata
    expose:
      - "5001"
      - "8080"
    ports:
      - "4001:4001" # libp2p swarm port; Keep this exposed
      - "127.0.0.1:8080:8080" # Gateway port; This should stay closed
      - "127.0.0.1:5001:5001" # HTTP API port; KEEP CLOSED AT ALL TIMES!!!!
      # If we choose to run IPFS on a side server in prod, we'll allow access to these only from our REST server's IP
    profiles:
      - dev
    logging:
      driver: none
  server:
    container_name: server
    image: server:latest
    build: ../
    ports:
    - 7621:7621
    env_file:
    - .env
    expose:
    - "7621"
    volumes:
      - ../src:/PRISM